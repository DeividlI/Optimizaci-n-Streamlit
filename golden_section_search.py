import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.animation as animation
import pandas as pd
import tempfile
import io
import os

def golden_section_search(f, a, b, epsilon):
    """
    Implementa el m√©todo Golden Section Search
    """
    # Almacenar datos para mostrar el progreso
    iteraciones = []
    
    # Paso 1: Normalizaci√≥n
    a_w = 0
    b_w = 1
    L_w = 1
    k = 1
    w_to_x = lambda w: a + w * (b - a)
    
    # Paso 2: Inicializar w1, w2 y evaluar f(w1), f(w2)
    w1 = a_w + 0.618 * L_w
    w2 = b_w - 0.618 * L_w
    f_w1 = f(w_to_x(w1))
    f_w2 = f(w_to_x(w2))
    
    # Guardar primera iteraci√≥n
    x1 = w_to_x(w1)
    x2 = w_to_x(w2)
    iteraciones.append({
        'Iteraci√≥n': k,
        'a': a,
        'b': b,
        'x1': x1,
        'x2': x2,
        'f(x1)': f_w1,
        'f(x2)': f_w2,
        'L': b - a,
        'Eliminar': 'Inicio'
    })
    
    while True:
        # Usar la regla de eliminaci√≥n de regi√≥n
        if f_w1 < f_w2:
            # El m√≠nimo est√° en [a_w, w2]
            b_w = w2
            # w2 se convierte en el nuevo w1, y su f(w2) tambi√©n
            w2 = w1
            f_w2 = f_w1
            L_w = b_w - a_w
            w1 = a_w + 0.618 * L_w
            f_w1 = f(w_to_x(w1))
            eliminar = f"[{w_to_x(w2):.4f}, {b:.4f}]"
            b = w_to_x(w2)
        else:
            # El m√≠nimo est√° en [w1, b_w]
            a_w = w1
            # w1 se convierte en el nuevo w2, y su f(w1) tambi√©n
            w1 = w2
            f_w1 = f_w2
            L_w = b_w - a_w
            w2 = b_w - 0.618 * L_w
            f_w2 = f(w_to_x(w2))
            eliminar = f"[{a:.4f}, {w_to_x(w1):.4f}]"
            a = w_to_x(w1)
        
        k += 1
        
        # Guardar iteraci√≥n actual
        x1 = w_to_x(w1)
        x2 = w_to_x(w2)
        iteraciones.append({
            'Iteraci√≥n': k,
            'a': a,
            'b': b,
            'x1': x1,
            'x2': x2,
            'f(x1)': f_w1,
            'f(x2)': f_w2,
            'L': b - a,
            'Eliminar': eliminar
        })
        
        # Paso 3: Criterio de paro
        if abs(L_w * (b - a)) < epsilon:
            break
    
    # Convertimos el w medio a x real
    w_opt = (a_w + b_w) / 2
    x_opt = w_to_x(w_opt)
    
    return x_opt, f(x_opt), iteraciones

def plot_golden_section_animation(f, a, b, iteraciones, epsilon):
    """
    Crea una animaci√≥n mostrando el proceso del m√©todo de Golden Section Search
    """
    x_plot_min = min(a, min(iter_data['a'] for iter_data in iteraciones)) - (b - a) * 0.1
    x_plot_max = max(b, max(iter_data['b'] for iter_data in iteraciones)) + (b - a) * 0.1
    x_vals = np.linspace(x_plot_min, x_plot_max, 500)
    y_vals = np.array([f(x) if not np.isnan(f(x)) else np.nan for x in x_vals])

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(x_vals, y_vals, label='f(x)', color='blue')
    ax.set_xlabel('x')
    ax.set_ylabel('f(x)')
    ax.set_title('Animaci√≥n del M√©todo de Golden Section Search')
    ax.grid(True, linestyle=':', alpha=0.7)

    y_lim = ax.get_ylim()

    # Inicializar elementos de la gr√°fica
    point_x1, = ax.plot([], [], 'go', markersize=8, label='x1')
    point_x2, = ax.plot([], [], 'mo', markersize=8, label='x2')
    line_a = ax.axvline(a, color='purple', linestyle='--', linewidth=1, label=f'a ({a:.2f})')
    text_a = ax.text(a, y_lim[1]*0.95, f'a={a:.2f}', color='purple', ha='center', va='top')
    line_b = ax.axvline(b, color='purple', linestyle='--', linewidth=1, label=f'b ({b:.2f})')
    text_b = ax.text(b, y_lim[1]*0.95, f'b={b:.2f}', color='purple', ha='center', va='top')
    initial_span = ax.add_patch(patches.Rectangle((a, y_lim[0]), b - a, y_lim[1] - y_lim[0], 
                                                 facecolor='lightseagreen', alpha=0.1, label='Intervalo Inicial'))
    eliminated_span = ax.add_patch(patches.Rectangle((a, y_lim[0]), 0, y_lim[1] - y_lim[0], 
                                                    facecolor='red', alpha=0.3, label='Regi√≥n Eliminada'))
    new_span = ax.add_patch(patches.Rectangle((a, y_lim[0]), 0, y_lim[1] - y_lim[0], 
                                             facecolor='darkgreen', alpha=0.2, label='Nuevo Intervalo'))
    iter_text = ax.text((a+b)/2, y_lim[0]*1.05, '', color='darkgreen', ha='center', va='bottom', 
                        fontsize=10, bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', boxstyle='round,pad=0.2'))
    ax.legend()

    def init():
        point_x1.set_data([], [])
        point_x2.set_data([], [])
        eliminated_span.set_width(0)
        new_span.set_width(0)
        iter_text.set_text('')
        return point_x1, point_x2, eliminated_span, new_span, iter_text

    def update(frame):
        if frame == 0:
            # Mostrar solo el intervalo inicial
            point_x1.set_data([], [])
            point_x2.set_data([], [])
            eliminated_span.set_width(0)
            new_span.set_width(0)
            iter_text.set_text('Iteraci√≥n 0\nIntervalo Inicial')
        else:
            iter_data = iteraciones[frame - 1]
            a_new, b_new = iter_data['a'], iter_data['b']
            x1, x2 = iter_data['x1'], iter_data['x2']
            f_x1, f_x2 = iter_data['f(x1)'], iter_data['f(x2)']
            
            # Actualizar puntos
            point_x1.set_data([x1], [f_x1])
            point_x2.set_data([x2], [f_x2])
            
            # Actualizar l√≠neas de l√≠mites
            line_a.set_xdata([a_new])
            text_a.set_position((a_new, y_lim[1]*0.95))
            text_a.set_text(f'a={a_new:.2f}')
            line_b.set_xdata([b_new])
            text_b.set_position((b_new, y_lim[1]*0.95))
            text_b.set_text(f'b={b_new:.2f}')
            
            # Actualizar regiones
            if frame == 1:
                eliminated_span.set_width(0)
            elif a_new > a:
                eliminated_span.set_xy((a, y_lim[0]))
                eliminated_span.set_width(a_new - a)
            elif b_new < b:
                eliminated_span.set_xy((b_new, y_lim[0]))
                eliminated_span.set_width(b - b_new)
            else:
                eliminated_span.set_width(0)
            
            new_span.set_xy((a_new, y_lim[0]))
            new_span.set_width(b_new - a_new)
            
            iter_text.set_text(f'Iteraci√≥n {frame}\nIntervalo [{a_new:.2f}, {b_new:.2f}]')
        
        return point_x1, point_x2, line_a, text_a, line_b, text_b, eliminated_span, new_span, iter_text

    # Crear la animaci√≥n (un fotograma por iteraci√≥n m√°s el inicial)
    ani = animation.FuncAnimation(fig, update, frames=len(iteraciones) + 1, init_func=init, interval=1000)

    # Guardar la animaci√≥n como GIF
    with tempfile.NamedTemporaryFile(suffix='.gif', delete=False) as temp_file:
        temp_file_path = temp_file.name
        ani.save(temp_file_path, writer='pillow', fps=1)

    # Leer el archivo temporal en un BytesIO para Streamlit
    with open(temp_file_path, 'rb') as file:
        output = io.BytesIO(file.read())

    # Eliminar el archivo temporal
    os.unlink(temp_file_path)

    plt.close(fig)
    output.seek(0)

    return output

def show_golden_section_search(FUNCIONES, evaluar_funcion):
    """
    Interfaz de Streamlit para el m√©todo Golden Section Search
    """
    st.markdown("""
    <div class="grid-background">
        <h2>üîç Golden Section Search Method</h2>
        <p>Este m√©todo emplea la proporci√≥n √°urea (œÜ ‚âà 0.618) para una b√∫squeda eficiente del √≥ptimo.</p>
        <p>La proporci√≥n √°urea permite reducir el intervalo de b√∫squeda de manera √≥ptima en cada iteraci√≥n.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Selecci√≥n de funci√≥n
    col1, col2 = st.columns([1, 1])
    
    with col1:
        funcion_seleccionada = st.selectbox(
            "Selecciona la funci√≥n a optimizar:",
            list(FUNCIONES.keys()),
            key="golden_funcion"
        )
        
        # Mostrar informaci√≥n de la funci√≥n
        st.markdown("### Funci√≥n seleccionada:")
        st.latex(FUNCIONES[funcion_seleccionada]["latex"])
        st.markdown(f"**Dominio:** {FUNCIONES[funcion_seleccionada]['dominio']}")
    
    with col2:
        st.markdown("### Par√°metros del m√©todo:")
        
        # Obtener l√≠mites por defecto de la funci√≥n
        intervalo_default = FUNCIONES[funcion_seleccionada]["intervalos"][0]
        a_default = intervalo_default[0]
        b_default = intervalo_default[1]
        
        a = st.number_input("L√≠mite inferior (a):", value=float(a_default), key="golden_a")
        b = st.number_input("L√≠mite superior (b):", value=float(b_default), key="golden_b")
        epsilon = st.number_input("Tolerancia (Œµ):", value=0.01, format="%.6f", key="golden_epsilon")
    
    if st.button("üîç Ejecutar Golden Section Search", key="golden_ejecutar"):
        if a >= b:
            st.error("‚ö†Ô∏è El l√≠mite inferior debe ser menor que el superior")
            return
        
        try:
            with st.spinner("Ejecutando Golden Section Search..."):
                # Define la funci√≥n lambda para el m√©todo
                def func(x):
                    return evaluar_funcion(x, funcion_seleccionada)
                
                # Ejecutar el m√©todo
                x_opt, f_opt, iteraciones = golden_section_search(func, a, b, epsilon)
            
            # Mostrar animaci√≥n
            st.markdown("### Animaci√≥n del Proceso")
            gif_output = plot_golden_section_animation(func, a, b, iteraciones, epsilon)
            st.image(gif_output, caption="Progreso del algoritmo por iteraci√≥n", use_container_width=True)
            
            # Mostrar resultados
            st.success("‚úÖ ¬°Golden Section Search completado!")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üéØ x √≥ptimo", f"{x_opt:.6f}")
            with col2:
                st.metric("üìä f(x) √≥ptimo", f"{f_opt:.6f}")
            with col3:
                st.metric("üîÑ Iteraciones", len(iteraciones))
            
            # Tabla de iteraciones
            st.markdown("### üìã Tabla de Iteraciones")
            df = pd.DataFrame(iteraciones)
            
            # Formatear n√∫meros para mejor visualizaci√≥n
            df_display = df.copy()
            for col in ['a', 'b', 'x1', 'x2', 'f(x1)', 'f(x2)', 'L']:
                if col in df_display.columns:
                    df_display[col] = df_display[col].apply(lambda x: f"{x:.6f}")
            
            st.dataframe(df_display, use_container_width=True, hide_index=True)
            
            # Gr√°fica de la funci√≥n y proceso de optimizaci√≥n
            st.markdown("### üìà Visualizaci√≥n del Proceso")
            
            # Crear gr√°fica
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
            
            # Gr√°fica 1: Funci√≥n completa
            x_range = np.linspace(a_default, b_default, 1000)
            y_range = [evaluar_funcion(x, funcion_seleccionada) for x in x_range]
            
            ax1.plot(x_range, y_range, 'b-', linewidth=2, label='f(x)')
            ax1.axvline(x_opt, color='red', linestyle='--', linewidth=2, label=f'x* = {x_opt:.4f}')
            ax1.scatter([x_opt], [f_opt], color='red', s=100, zorder=5, label=f'f(x*) = {f_opt:.4f}')
            ax1.set_xlabel('x')
            ax1.set_ylabel('f(x)')
            ax1.set_title(f'Funci√≥n {funcion_seleccionada} - Golden Section Search')
            ax1.grid(True, alpha=0.3)
            ax1.legend()
            
            # Gr√°fica 2: Convergencia del intervalo
            longitudes = [iter_data['L'] for iter_data in iteraciones]
            iteraciones_num = [iter_data['Iteraci√≥n'] for iter_data in iteraciones]
            
            ax2.plot(iteraciones_num, longitudes, 'g-o', linewidth=2, markersize=6)
            ax2.axhline(epsilon, color='red', linestyle='--', alpha=0.7, label=f'Tolerancia = {epsilon}')
            ax2.set_xlabel('Iteraci√≥n')
            ax2.set_ylabel('Longitud del Intervalo')
            ax2.set_title('Convergencia del Intervalo de B√∫squeda')
            ax2.grid(True, alpha=0.3)
            ax2.legend()
            ax2.set_yscale('log')
            
            plt.tight_layout()
            st.pyplot(fig)
            plt.close()
            
            # Informaci√≥n adicional sobre el m√©todo
            st.markdown("### ‚ÑπÔ∏è Informaci√≥n del M√©todo")
            st.info(f"""
            **Golden Section Search Method:**
            - ‚úÖ Convergencia garantizada para funciones unimodales
            - üìè Ratio de reducci√≥n constante: œÜ ‚âà 0.618
            - üî¢ Total de iteraciones: {len(iteraciones)}
            - üìê Longitud final del intervalo: {iteraciones[-1]['L']:.6f}
            - ‚ö° Eficiencia: O(log n) evaluaciones de funci√≥n
            
            **Caracter√≠sticas:**
            - La proporci√≥n √°urea permite la b√∫squeda m√°s eficiente posible
            - Solo requiere 1 evaluaci√≥n nueva por iteraci√≥n (excepto la primera)
            - Convergencia lineal con ratio constante
            """)
            
        except Exception as e:
            st.error(f"‚ùå Error durante la ejecuci√≥n: {str(e)}")
            st.info("Verifica que los par√°metros est√©n dentro del dominio de la funci√≥n.")
    
    # Informaci√≥n te√≥rica del m√©todo
    with st.expander("üìö Informaci√≥n Te√≥rica - Golden Section Search"):
        st.markdown("""
        ### üîç Golden Section Search Method
        
        El m√©todo de b√∫squeda de la secci√≥n √°urea es una t√©cnica de optimizaci√≥n unidimensional que utiliza la proporci√≥n √°urea (œÜ = (‚àö5-1)/2 ‚âà 0.618) para encontrar eficientemente el m√≠nimo de una funci√≥n unimodal.
        
        #### **Algoritmo:**
        1. **Normalizaci√≥n**: Transformar el intervalo [a,b] a [0,1]
        2. **Inicializaci√≥n**: Colocar dos puntos usando la proporci√≥n √°urea
        3. **Iteraci√≥n**: Eliminar la regi√≥n con mayor valor de funci√≥n
        4. **Convergencia**: Continuar hasta que el intervalo sea menor que Œµ
        
        #### **Ventajas:**
        - ‚úÖ Convergencia garantizada para funciones unimodales
        - ‚úÖ √ìptimo en t√©rminos de n√∫mero de evaluaciones
        - ‚úÖ Solo requiere una evaluaci√≥n nueva por iteraci√≥n
        - ‚úÖ Convergencia lineal estable
        
        #### **Desventajas:**
        - ‚ùå Requiere que la funci√≥n sea unimodal
        - ‚ùå Convergencia m√°s lenta que m√©todos de segundo orden
        - ‚ùå No utiliza informaci√≥n de derivadas
        
        #### **Complejidad:**
        - Temporal: O(log(1/Œµ))
        - Espacial: O(1)
        """)